library(ggplot2)
library(cowplot)
library(scales)
library(dplyr)
# Discretizar variable numérica exposure
df$exposure_cat <- cut(df$exposure, breaks = 5)
library(skimr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(scales)
library(tibble)  # <- importante para rownames_to_column
library(cowplot)
theme_set(theme_cowplot())
# Cargar datos eliminando la primera columna (_c0)
df <- read.csv("car.csv", sep = ",")
df <- df[ , -1]  # Eliminar la primera columna si es un índice automático (_c0)
# Mostrar las primeras filas
head(df)
# Supongamos que tu base de datos se llama 'df'
# Primero filtramos solo las columnas numéricas y usamos skim()
estadisticas_basicas <- df %>%
select(where(is.numeric)) %>%
skim()
# Mostrar solo las estadísticas relevantes si deseas un resumen más simple:
resumen_simple <- df %>%
select(where(is.numeric)) %>%
summarise(across(everything(),
list(
media = ~mean(., na.rm = TRUE),
mediana = ~median(., na.rm = TRUE),
min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
n = ~sum(!is.na(.))
),
.names = "{.col}_{.fn}"))
# Mostrar resultados
print(estadisticas_basicas)
library(ggplot2)
library(dplyr)
library(tidyr)
# Seleccionar columna numérica
df_numericas <- df %>% select(exposure,claimcst0)
# Convertir a formato largo
df_largo <- df_numericas %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Valor")
# Crear gráfico y guardarlo en un objeto
p <- ggplot(df_largo, aes(x = Valor)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
theme_minimal() +
labs(title = "", x = "Valor", y = "Frecuencia")
# Guardar como imagen JPG
ggsave("histograma_exposure.jpg", plot = p, width = 12, height = 4, dpi = 300)
# Lista de variables categóricas
variables_categoricas <- c("agecat", "veh_age", "numclaims", "veh_body", "gender", "area")
# Crear Top 5
top_5_categorias <- lapply(variables_categoricas, function(var) {
df %>%
count(!!sym(var)) %>%
arrange(desc(n)) %>%
slice_head(n = 5) %>%
mutate(variable = var,
categoria = as.character(!!sym(var))) %>%
select(variable, categoria, n)
}) %>%
bind_rows()
# Ordenar para visualización
top_5_categorias <- top_5_categorias %>%
group_by(variable) %>%
mutate(categoria = factor(categoria, levels = rev(unique(categoria)))) %>%
ungroup()
# Crear gráfico y asignarlo a un objeto
grafico_top5 <- ggplot(top_5_categorias, aes(x = categoria, y = n, fill = variable)) +
geom_col(show.legend = FALSE) +
coord_flip() +
facet_wrap(~ variable, scales = "free_y") +
labs(title = "",
x = "Categoría",
y = "Frecuencia") +
theme_cowplot()
# Guardar como JPG
ggsave("top_5_categorias.jpg", plot = grafico_top5, width = 12, height = 6, dpi = 300)
# Paso 1: seleccionar solo variables numéricas
df_numericas <- df %>% select(where(is.numeric))
# Paso 2: calcular la matriz de correlación
matriz_cor <- cor(df_numericas, use = "pairwise.complete.obs")
# Paso 3: convertir la matriz en formato largo
df_cor <- as.data.frame(matriz_cor) %>%
rownames_to_column(var = "Var1") %>%
pivot_longer(-Var1, names_to = "Var2", values_to = "Correlacion")
# Paso 4: crear gráfico y asignarlo a un objeto
mapa_cor <- ggplot(df_cor, aes(x = Var1, y = Var2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = "Correlación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_fixed() +
labs(title = "")
# Paso 5: guardar el gráfico como imagen .jpg
ggsave("mapa_calor_correlaciones.jpg", plot = mapa_cor, width = 7, height = 6, dpi = 300)
library(ggplot2)
library(cowplot)
library(scales)
library(dplyr)
# Discretizar numérica (solo exposure en este caso)
df$exposure_cat <- cut(df$exposure, breaks = 5)
# Función mejorada para gráficos limpios
grafico_clm <- function(var, titulo = NULL) {
ggplot(df, aes_string(x = var, fill = "factor(clm)")) +
geom_bar(position = "fill", width = 0.7) +
scale_y_continuous(labels = percent_format(), expand = c(0, 0)) +
labs(
x = NULL,
y = "Proporción",
fill = "Reclamo (clm)",
title = titulo %||% paste("Reclamos por", var)
) +
theme_minimal(base_size = 10) +
theme(
axis.text.x = element_text(angle = 25, hjust = 1, size = 8),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, face = "bold"),
legend.position = "right"
)
}
# Crear los 6 gráficos que se usarán
p1 <- grafico_clm("gender", "Género")
p2 <- grafico_clm("area", "Área")
p3 <- grafico_clm("veh_body", "Tipo de vehículo")
p4 <- grafico_clm("veh_age", "Antigüedad del vehículo")
p5 <- grafico_clm("agecat", "Categoría de edad")
p6 <- grafico_clm("exposure_cat", "Nivel de exposición")
# Organizar: 3 arriba y 3 abajo
fila1 <- plot_grid(p1, p2, p3, ncol = 3, rel_widths = c(1, 1, 1))
fila2 <- plot_grid(p4, p5, p6, ncol = 3, rel_widths = c(1, 1, 1))
# Combinar
grafico_final <- plot_grid(fila1, fila2, ncol = 1, rel_heights = c(1, 1))
# Mostrar el gráfico
print(grafico_final)
library(ggplot2)
library(cowplot)
library(scales)
library(dplyr)
# Discretizar variable numérica exposure
df$exposure_cat <- cut(df$exposure, breaks = 5)
# Función para gráfico limpio y claro
grafico_clm <- function(var, titulo = NULL) {
ggplot(df, aes_string(x = var, fill = "factor(clm)")) +
geom_bar(position = "fill", width = 0.7) +
scale_y_continuous(labels = percent_format(), expand = c(0, 0)) +
labs(
x = NULL,
y = "Proporción",
fill = "Reclamo (clm)",
title = titulo %||% paste("Reclamos por", var)
) +
theme_minimal(base_size = 11) +
theme(
axis.text.x = element_text(angle = 25, hjust = 1, size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 11, face = "bold"),
legend.position = "right"
)
}
# Crear los 6 gráficos seleccionados
p1 <- grafico_clm("gender", "Género")
p2 <- grafico_clm("area", "Área")
p3 <- grafico_clm("veh_body", "Tipo de vehículo")
p4 <- grafico_clm("veh_age", "Antigüedad del vehículo")
p5 <- grafico_clm("agecat", "Categoría de edad")
p6 <- grafico_clm("exposure_cat", "Nivel de exposición")
# Organizar en filas de 2
fila1 <- plot_grid(p1, p2, ncol = 2)
fila2 <- plot_grid(p3, p4, ncol = 2)
fila3 <- plot_grid(p5, p6, ncol = 2)
# Unir todas las filas
grafico_final <- plot_grid(fila1, fila2, fila3, ncol = 1, rel_heights = c(1, 1, 1))
# Mostrar el gráfico final
print(grafico_final)
library(ggplot2)
library(cowplot)
library(scales)
library(dplyr)
# Discretizar variable numérica exposure
df$exposure_cat <- cut(df$exposure, breaks = 5)
# Función para gráfico limpio y claro
grafico_clm_solo1 <- function(var, titulo = NULL) {
df %>%
count(!!sym(var), clm) %>%
group_by(!!sym(var)) %>%
mutate(prop = n / sum(n)) %>%
filter(clm == 1) %>%
ggplot(aes_string(x = var, y = "prop")) +
geom_col(fill = "steelblue") +
scale_y_continuous(labels = percent_format(), limits = c(0, 0.15)) +
labs(x = NULL, y = "Proporción de reclamos", title = titulo) +
theme_minimal()
}
# Crear los 6 gráficos seleccionados
p1 <- grafico_clm("gender", "Género")
p2 <- grafico_clm("area", "Área")
p3 <- grafico_clm("veh_body", "Tipo de vehículo")
p4 <- grafico_clm("veh_age", "Antigüedad del vehículo")
p5 <- grafico_clm("agecat", "Categoría de edad")
p6 <- grafico_clm("exposure_cat", "Nivel de exposición")
# Organizar en filas de 2
fila1 <- plot_grid(p1, p2, ncol = 2)
fila2 <- plot_grid(p3, p4, ncol = 2)
fila3 <- plot_grid(p5, p6, ncol = 2)
# Unir todas las filas
grafico_final <- plot_grid(fila1, fila2, fila3, ncol = 1, rel_heights = c(1, 1, 1))
# Mostrar el gráfico final
print(grafico_final)
library(ggplot2)
library(cowplot)
library(scales)
library(dplyr)
# Discretizar variable numérica exposure
df$exposure_cat <- cut(df$exposure, breaks = 5)
# Función para gráfico limpio y claro
grafico_clm_solo1 <- function(var, titulo = NULL) {
df %>%
count(!!sym(var), clm) %>%
group_by(!!sym(var)) %>%
mutate(prop = n / sum(n)) %>%
filter(clm == 1) %>%
ggplot(aes_string(x = var, y = "prop")) +
geom_col(fill = "steelblue") +
scale_y_continuous(labels = percent_format(), limits = c(0, 0.15)) +
labs(x = NULL, y = "Proporción de reclamos", title = titulo) +
theme_minimal()
}
# Crear los 6 gráficos seleccionados
p1 <- grafico_clm_solo1("gender", "Género")
p2 <- grafico_clm_solo1("area", "Área")
p3 <- grafico_clm_solo1("veh_body", "Tipo de vehículo")
p4 <- grafico_clm_solo1("veh_age", "Antigüedad del vehículo")
p5 <- grafico_clm_solo1("agecat", "Categoría de edad")
p6 <- grafico_clm_solo1("exposure_cat", "Nivel de exposición")
# Organizar en filas de 2
fila1 <- plot_grid(p1, p2, ncol = 2)
fila2 <- plot_grid(p3, p4, ncol = 2)
fila3 <- plot_grid(p5, p6, ncol = 2)
# Unir todas las filas
grafico_final <- plot_grid(fila1, fila2, fila3, ncol = 1, rel_heights = c(1, 1, 1))
# Mostrar el gráfico final
print(grafico_final)
library(ggplot2)
library(cowplot)
library(scales)
library(dplyr)
library(rlang)
# Discretizar exposure en 5 rangos
df$exposure_cat <- cut(df$exposure, breaks = 5)
# Función mejorada
grafico_clm_solo1 <- function(var, titulo = NULL) {
df %>%
count(!!sym(var), clm) %>%
group_by(!!sym(var)) %>%
mutate(prop = n / sum(n)) %>%
filter(clm == 1) %>%
ggplot(aes_string(x = var, y = "prop")) +
geom_col(fill = "#2a9d8f", width = 0.7) +
geom_text(aes(label = scales::percent(prop, accuracy = 0.1)),
vjust = -0.5, size = 3.2, color = "black") +
scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(0, 0.15), expand = c(0, 0)) +
labs(
x = NULL,
y = "Proporción de reclamos",
title = titulo
) +
theme_minimal(base_size = 11) +
theme(
axis.text.x = element_text(angle = 25, hjust = 1, size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 11, face = "bold"),
panel.grid.minor = element_blank()
)
}
# Crear los 6 gráficos
p1 <- grafico_clm_solo1("gender", "Género")
p2 <- grafico_clm_solo1("area", "Área")
p3 <- grafico_clm_solo1("veh_body", "Tipo de vehículo")
p4 <- grafico_clm_solo1("veh_age", "Antigüedad del vehículo")
p5 <- grafico_clm_solo1("agecat", "Categoría de edad")
p6 <- grafico_clm_solo1("exposure_cat", "Nivel de exposición")
# Organizar en 3 filas de 2
fila1 <- plot_grid(p1, p2, ncol = 2)
fila2 <- plot_grid(p3, p4, ncol = 2)
fila3 <- plot_grid(p5, p6, ncol = 2)
grafico_final <- plot_grid(fila1, fila2, fila3, ncol = 1, rel_heights = c(1, 1, 1.05))
# Mostrar
print(grafico_final)
# Guardar como archivo JPG
ggsave("grafico_reclamos_por_variable.jpg",
plot = grafico_final,
width = 12,       # ancho en pulgadas
height = 10,      # alto en pulgadas
dpi = 300,        # alta resolución
units = "in")     # unidades en pulgadas
